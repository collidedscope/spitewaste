main: push 0 push 46 push 46 push 88 push 88 call strpack push 0 push 46 push 88 push 65 push 88 call strpack push 0 push 46 push 66 push 65 push 88 call strpack push 0 push 46 push 88 push 88 push 66 call strpack push 0 push 46 push 65 push 88 push 66 call strpack push 0 push 46 push 66 push 88 push 66 call strpack push 0 push 46 push 88 push 65 push 66 call strpack push 0 push 46 push 65 push 65 push 66 call strpack push 0 push 46 push 66 push 66 push 88 call strpack push 0 push 46 push 88 push 66 push 88 call strpack push 0 push 46 push 65 push 66 push 88 call strpack push 0 push 88 push 88 push 88 push 65 call strpack push 0 push 65 push 88 push 88 push 65 call strpack push 0 push 66 push 88 push 88 push 65 call strpack push 0 push 88 push 65 push 88 push 65 call strpack push 0 push 65 push 65 push 88 push 65 call strpack push 0 push 46 push 88 push 65 push 65 call strpack push 0 push 46 push 65 push 65 push 65 call strpack push 0 push 46 push 66 push 65 push 66 call strpack push 0 push 88 push 65 push 66 push 65 call strpack push 0 push 65 push 65 push 66 push 65 call strpack push 0 push 88 push 88 push 66 push 65 call strpack push 0 push 65 push 88 push 66 push 65 call strpack push 0 push 46 push 66 push 66 push 66 call strpack push 24 dup dup push 2 sub jn reduce_done_a pop push -9 swap push 1 sub store
reduce_loop_a: call strcat push -9 dup load push 1 sub dup jz reduce_done_a store jump reduce_loop_a
reduce_done_a: pop pop push 0
read_loop: push -1 dup ichr load jn read_done push -1 load push 124 sub jz read_done push 128 mul push -1 load push 56 add add jump read_loop
read_done: call strrev push -100 dup store push 0
parse_loop: copy 1 jz parse_done copy 1 push 128 mod call strcat swap push 128 div swap call try_insn jump parse_loop
try_insn: copy 2 copy 1 push 4 push 46 call ljustc call strindex dup push 4 mod jz found_insn pop ret
found_insn: slide 1 push 4 div push -100 dup call dec load copy 1 store push 8 sub jn parse_number push 0 jump number_parsed
parse_number: push 128 copy 1 push 66 call strindex push 1 add call pow call divmod push 128 call divmod swap push 0 push 66 push 65 push 88 call strpack push 0 push 95 push 49 push 48 call strpack call strtrans call bin swap push 88 sub jz number_parsed push -1 mul
number_parsed: push -100 dup call dec load swap store push 0 ret
parse_done: push -100 push 1 add slide 3 dup push -100 load store
labels_loop: push 2 sub dup push -100 push 1 add load sub jn labels_done dup load push 3 sub jz add_label jump labels_loop
add_label: push -100 dup call dec load copy 1 store jump labels_loop
labels_done: push -100 push 2 add slide 1 push -100 load store push -100 dup store
interpret: push -100 dup call dec load load push -100 call dec dup jz _push dup push 1 sub jz _copy dup push 2 sub jz _slide dup push 3 sub jz _label dup push 4 sub jz _call dup push 5 sub jz _jump dup push 6 sub jz _jz dup push 7 sub jz _jn dup push 8 sub jz _pop dup push 9 sub jz _dup dup push 10 sub jz _swap dup push 11 sub jz _add dup push 12 sub jz _sub dup push 13 sub jz _mul dup push 14 sub jz _div dup push 15 sub jz _mod dup push 16 sub jz _store dup push 17 sub jz _load dup push 18 sub jz _ret dup push 19 sub jz _ichr dup push 20 sub jz _inum dup push 21 sub jz _ochr dup push 22 sub jz _onum dup push 23 sub jz _exit pop exit
_push: pop push -100 load load jump interpret
_pop: pop pop jump interpret
_dup: pop dup jump interpret
_swap: pop swap jump interpret
_copy: pop push -100 load load call ncopy jump interpret
_slide: pop push -100 load load call nslide jump interpret
_label: pop jump interpret
_call: pop push -100 push 2 add dup call dec load push -100 load store jump branch
_ret: pop push -100 push -100 push 2 add load load store push -100 push 2 add call inc jump interpret
_jz: pop jz branch jump interpret
_jn: pop jn branch jump interpret
_jump: pop
branch: push -100 dup load load push 1 add push -100 push 1 add load sub push 0 swap sub load push 1 sub store jump interpret
_add: pop add jump interpret
_sub: pop sub jump interpret
_mul: pop mul jump interpret
_div: pop div jump interpret
_mod: pop mod jump interpret
_store: pop store jump interpret
_load: pop load jump interpret
_ichr: pop ichr jump interpret
_inum: pop inum jump interpret
_ochr: pop ochr jump interpret
_onum: pop onum jump interpret
_exit: pop exit
roll: push -10 dup store
_roll_keep: dup jz _roll_remove push -10 call dec swap push -10 load swap store push 1 sub jump _roll_keep
_roll_remove: push 10 sub load swap push -10 swap store
_roll_restore: dup load swap push 1 add dup push 10 add jz _roll_done jump _roll_restore
_roll_done: load ret
npop: dup jz _npop_done swap pop push 1 sub jump npop
_npop_done: pop ret
nslide: swap push -1 swap store call npop push -1 load ret
ncopy: push -10 dup store
_ncopy_loop: dup jz _ncopy_save swap push -10 dup call dec load swap store push 1 sub jump _ncopy_loop
_ncopy_save: push 10 sub dup load swap copy 2 store
_ncopy_restore: dup push 9 add jz _ncopy_done dup load swap push 1 add jump _ncopy_restore
_ncopy_done: pop ret
strpack: push 0
_strpack_loop: swap dup jz _strpack_done copy 1 push 128 mul add slide 1 jump _strpack_loop
_strpack_done: pop call strrev ret
strunpack: call strrev push 0 swap
_strunpack_loop: dup jz _strunpack_done dup push 128 mod swap push 128 div jump _strunpack_loop
_strunpack_done: pop ret
strlen: dup push 128 call ilog swap push 128 mod push 0 call neq add ret
strcat: push 128 copy 2 call strlen call pow mul add ret
strrev: push 0 swap
_strrev_loop: dup jz _strrev_done swap push 128 mul copy 1 push 128 mod add swap push 128 div jump _strrev_loop
_strrev_done: pop ret
strslice: swap push 128 swap call pow copy 2 swap div swap push 128 swap call pow mod slide 1 ret
strindex: swap push 0
_strindex_loop: copy 1 copy 3 call strlen push 0 swap call strslice copy 3 sub jz _strindex_found push 1 add swap push 128 div dup jz _strindex_no swap jump _strindex_loop
_strindex_no: push -1 slide 3 ret
_strindex_found: slide 2 ret
charat: push 1 call strslice ret
strrep: push 0 swap
_strrep_loop: dup jz _strrep_done swap copy 2 call strcat swap push 1 sub jump _strrep_loop
_strrep_done: swap slide 2 ret
_justc: swap copy 2 call strlen sub push 0 call max call strrep ret
ljustc: call _justc call strcat ret
strtrans: push -3 swap store push -2 swap store dup call strlen push -1 swap store call strunpack push -1 load push -9 push -1 store swap
map_loop_f: push -9 call inc swap dup dup push -9 load sub jz map_done_f call roll call _strtrans jump map_loop_f
map_done_f: pop pop call strpack ret
_strtrans: dup push -2 load swap call strindex dup jn _strtrans_no push -3 load swap call charat slide 1 ret
_strtrans_no: pop ret
alpha: push 0 push 122 push 121 push 120 push 119 push 118 push 117 push 116 push 115 push 114 push 113 push 112 push 111 push 110 push 109 push 108 push 107 push 106 push 105 push 104 push 103 push 102 push 101 push 100 push 99 push 98 push 97 push 57 push 56 push 55 push 54 push 53 push 52 push 51 push 50 push 49 push 48 call strpack ret
stoi: swap dup call _stoi_sign swap copy 1 call eq push 2 mul push 1 sub push -2 swap store push 0
_stoi_loop: swap dup jz _stoi_done swap copy 2 copy 2 call strlen push 1 sub call pow copy 2 push 128 mod call alpha swap call strindex dup jn _stoi_invalid mul add swap push 128 div swap jump _stoi_loop
_stoi_sign: dup push 0 call charat push 45 call eq copy 1 call strlen call strslice ret
_stoi_invalid: pop pop slide 1 swap div push -2 load mul ret
_stoi_done: swap slide 2 push -2 load mul ret
bin: push 2 call stoi ret
inc: dup load push 1 add store ret
dec: dup load push 1 sub store ret
eq: sub jz _eq_yes push 0 ret
_eq_yes: push 1 ret
neq: sub jz _neq_no push 1 ret
_neq_no: push 0 ret
pow: push 1 swap
_pow_loop: dup jz _pow_done swap copy 2 mul swap push 1 sub jump _pow_loop
_pow_done: swap slide 2 ret
ilog: push -1 push 0 store
_ilog_loop: swap copy 1 div dup jz _ilog_done push -1 call inc swap jump _ilog_loop
_ilog_done: push -1 load slide 2 ret
max: copy 1 copy 1 sub jn _max_done swap
_max_done: slide 1 ret
divmod: push -1 swap store dup push -1 load div swap push -1 load mod ret 
